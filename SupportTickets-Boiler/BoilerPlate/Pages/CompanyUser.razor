@page "/company/user/{Username}"
@using BoilerPlate.Models
@using BoilerPlate.Services
@using Microsoft.AspNetCore.Components
@inject TicketService Tickets
@inject SessionService Session
@inject UserService Users
@inject NavigationManager Nav

@code {
    [Parameter]
    public string Username { get; set; } = "";

    // Prepare the same company list and color palette
    private List<User> companies = new();
    private string[] colors = { "red", "orange", "yellow", "cyan", "green", "blue", "purple" };

    protected override void OnInitialized()
    {
        companies = Users.GetAll().Where(u => u.IsCompany).ToList();
    }
}

<div class="container py-5">
    <h3 class="mb-4">@Username’s Tickets</h3>
    <div class="row">
        <!-- Sidebar of employees -->
        <div class="col-md-3">
            <h5>Employees</h5>
            <ul class="list-group mb-4">
                @for (int i = 0; i < companies.Count; i++)
                {
                    var emp = companies[i];
                    var color = colors[i % colors.Length];
                    var inProg = Tickets.GetAll()
                    .Count(t => t.Handler == emp.Username &&
                    t.Status == TicketStatus.InProgress);
                    <li class="list-group-item d-flex justify-content-between align-items-center bg-secondary text-white">
                        <span style="width:12px;height:12px;background:@color;border-radius:50%;display:inline-block;margin-right:0.5rem;"></span>
                        <span class="flex-grow-1">@emp.Username</span>
                        <span class="badge bg-warning rounded-pill">@inProg</span>
                    </li>
                }
            </ul>
        </div>

        <!-- Filtered ticket list -->
        <div class="col-md-9">
            @foreach (var t in Tickets.GetAll().Where(t => t.Username == Username && t.Status != TicketStatus.Draft))
            {
                // find handler’s color
                var handlerColor = "";
                if (!string.IsNullOrEmpty(t.Handler))
                {
                    var idx = companies.FindIndex(c => c.Username == t.Handler);
                    handlerColor = idx >= 0 ? colors[idx % colors.Length] : "transparent";
                }

                <div class="card mb-2 p-3 d-flex justify-content-between align-items-start"
                     style="border:2px solid @(handlerColor);">
                    <div style="flex:1;">
                        <strong>@t.Username</strong> — Link: @t.LinkId
                        <div class="mt-1">@t.Content</div>

                        @if (t.Status == TicketStatus.Submitted)
                        {
                            <small class="text-muted">Status: Submitted</small>
                        }
                        else if (t.Status == TicketStatus.InProgress)
                        {
                            <small class="text-muted">In Progress by: @t.Handler</small>
                        }
                        else if (t.Status == TicketStatus.Resolved)
                        {
                            <small class="text-success">Resolved by: @t.Handler</small>
                        }
                    </div>

                    <div class="d-flex flex-column gap-1 ms-3">
                        @if (t.Handler == Session.CurrentUsername && t.Status == TicketStatus.InProgress)
                        {
                            <button class="btn btn-sm btn-outline-danger"
                                    @onclick='() => Tickets.UnassignHandler(t.Id)'>
                                Unhandle
                            </button>
                            <button class="btn btn-sm btn-outline-success"
                                    @onclick='() => Tickets.UpdateStatus(t.Id, TicketStatus.Resolved)'>
                                Resolve
                            </button>
                        }
                        else if (t.Handler is null && t.Status == TicketStatus.Submitted)
                        {
                            <button class="btn btn-sm btn-outline-warning"
                                    @onclick='() => Tickets.AssignHandler(t.Id, Session.CurrentUsername!)'>
                                Handle
                            </button>
                        }
                    </div>
                </div>
            }

            <div class="text-end mt-3">
                <button class="btn btn-link"
                        @onclick='() => Nav.NavigateTo("/users")'>
                    ← Back to Users
                </button>
            </div>
        </div>
    </div>
</div>
