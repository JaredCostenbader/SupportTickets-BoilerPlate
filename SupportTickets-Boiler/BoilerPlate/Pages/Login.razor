@page "/"
@using BoilerPlate.Services
@using BoilerPlate.Models
@inject UserService    Users
@inject SessionService Session
@inject NavigationManager Nav

<div class="d-flex justify-content-center align-items-center vh-100">
    <div class="card p-4" style="min-width: 320px; padding-bottom:4rem">
        <h3 class="text-center mb-3">Log In</h3>

        <input class="form-control form-control-lg mb-2"
               @bind="username"
               @bind:event="oninput"
               placeholder="Username" />

        <input type="password"
               class="form-control form-control-lg mb-2"
               @bind="password"
               @bind:event="oninput"
               placeholder="Password" />

        @* Live Account‐Type Confirmation *@
        @if (ValidUser is not null)
        {
            <div class="text-center mb-3">
                <small class="text-muted">
                    Account type: <strong>@(ValidUser.IsCompany ? "Company" : "User")</strong>
                </small>
            </div>
        }

        <button class="btn btn-primary btn-lg w-100 mb-2"
                @onclick="HandleLogin">
            Log In
        </button>

        <div class="text-center">
            <a href="/signup">Don’t have an account? Sign up</a>
        </div>

        @if (!string.IsNullOrEmpty(error))
        {
            <div class="text-danger text-center mt-2">@error</div>
        }
    </div>
</div>

@code {
    string username = "", password = "", error = "";

    // Computed property—re‑evaluates on each render
    User? ValidUser => Users.Authenticate(username, password);

    void HandleLogin()
    {
        var u = ValidUser;
        if (u == null)
        {
            error = "Bad credentials";
            return;
        }

        // store session
        Session.CurrentUsername = u.Username;
        Session.IsCompany       = u.IsCompany;

        // navigate
        Nav.NavigateTo(u.IsCompany ? "/users" : "/submit");
    }
}